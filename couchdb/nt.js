{
  "_id": "_design/nt",
  "_rev": "16-72ecaf7a2b8222d08400db0253d3cc65",
  "lists": {
    "triples": "function(head,req) { var row; start({ 'headers': { 'Content-Type': 'text/plain' } }); while(row = getRow()) { send(row.value); } }"
  },
  "views": {
    "triples": {
      "map": "/*\n\nShared code\n\n\n*/\n\n//----------------------------------------------------------------------------------------\n// http://stackoverflow.com/a/25715455\nfunction isObject (item) {\n  return (typeof item === \"object\" && !Array.isArray(item) && item !== null);\n}\n\n//----------------------------------------------------------------------------------------\n// http://stackoverflow.com/a/21445415\nfunction uniques(arr) {\n  var a = [];\n  for (var i = 0, l = arr.length; i < l; i++)\n    if (a.indexOf(arr[i]) === -1 && arr[i] !== '')\n      a.push(arr[i]);\n  return a;\n}\n\n\t\t\n//----------------------------------------------------------------------------------------\n// Store a triple with optional language code\nfunction triple(subject, predicate, object, language) {\n  var triple = [];\n  triple[0] = subject;\n  triple[1] = predicate;\n  triple[2] = object;\n  \n  if (typeof language === 'undefined') {\n  } else {\n    triple[3] = language;\n  }\n  \n  return triple;\n}\n\n\n//----------------------------------------------------------------------------------------\n// Enclose triple in suitable wrapping for HTML display or triplet output\nfunction wrap(s, html) {\nif (s) {\n\n  if (s.match(/^URILITERAL/)) {\n  \ts = '\"' + s.replace(/URILITERAL/, '') + '\"';\n  } else {\n\n  if (s.match(/^(http|urn|_:)/)) {\n    s = s.replace(/\\\\_/g, '_');\n\n    // handle < > in URIs such as SICI-based DOIs\n    s = s.replace(/</g, '%3C');\n    s = s.replace(/>/g, '%3E');\n  \n    if (html) {\n      s = '&lt;' + s + '&gt;';\n    } else {\n      s = '<' + s + '>';\n    }\n  } else {\n    s = '\"' + s.replace(/\"/g, '\\\\\"') + '\"';\n  }\n  }\n  }\n  return s;\n}\n\n//----------------------------------------------------------------------------------------\n// https://css-tricks.com/snippets/javascript/htmlentities-for-javascript/\nfunction htmlEntities(str) {\n    return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n}\n\n//----------------------------------------------------------------------------------------\nfunction  detect_language(s) {\n  var language = null;\n  var matched = 0;\n  var parts =[];\n  \n  var regexp = [];\n  \n  // https://gist.github.com/ryanmcgrath/982242\n  regexp['ja'] = /[\\u3000-\\u303F]|[\\u3040-\\u309F]|[\\u30A0-\\u30FF]|[\\uFF00-\\uFFEF]|[\\u4E00-\\u9FAF]|[\\u2605-\\u2606]|[\\u2190-\\u2195]|\\u203B/g; \n  // http://hjzhao.blogspot.co.uk/2015/09/javascript-detect-chinese-character.html\n  regexp['zh'] = /[\\u4E00-\\uFA29]/g; \n  // http://stackoverflow.com/questions/32709687/js-check-if-string-contains-only-cyrillic-symbols-and-spaces\n  regexp['ru'] = /[\\u0400-\\u04FF]/g; \n  \n  for (var i in regexp) {\n    parts = s.match(regexp[i]);\n    \n\t  if (parts != null) {\n\t\tif (parts.length > matched) {\n\t\t  language = i;\n\t\t  matched = parts.length;\n\t\t}\n\t  }\n  }\n  \n  // require a minimum matching\n  if (matched < 2) {\n    language = null;\n  }\n  \n  return language;\n  \n}\n\n\n//----------------------------------------------------------------------------------------\nfunction output(doc, triples) {\n    // CouchDB\n    for (var i in triples) {\n      var s = 0;\n      var p = 1;\n      var o = 2;\n\n      var lang = 3;\n\n      var nquads = wrap(triples[i][s], false) \n        + ' ' + wrap(triples[i][p], false) \n        + ' ' + wrap(triples[i][o], false);\n      if (triples[i][lang]) {\n        nquads += '@' + triples[i][lang];\n      }\n        \n      nquads += ' .' + \"\\n\";\n\n      emit(doc._id, nquads);\n      //console.log(nquads);\n    }\n}\n\n\n//----------------------------------------------------------------------------------------\n// START COUCHDB VIEW\nfunction message(doc) {\n  if (doc.message) {\n\n    \n    var subject_id = 'https://bie.ala.org.au/species/' + doc._id;\n        \n    var triples = [];   \n    \n    // type\n    \n\t  triples.push(triple(\n\t  \tsubject_id,\n\t\t'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',\n\t\t'http://rs.tdwg.org/ontology/voc/TaxonConcept#TaxonConcept'\n\t\t));\n\t  \n\n\t\t/* dwc\n\t  triples.push(triple(\n\t  \tsubject_id,\n\t\t'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',\n\t\t'http://rs.tdwg.org/dwc/terms/Taxon'\n\t\t));\n\t  \n\t  */\n     \n    for (var i in doc.message.taxonConcept) {\n      switch (i) {\n      \n        \n        case 'guid':\n           // UUID and LSID if we have them\n           if (doc.message.taxonConcept[i].match(/urn:lsid:biodiversity.org.au:afd.taxon:/)) {\n           \n              // LSID\n              triples.push(triple(subject_id,\n                'http://schema.org/identifier',\n                doc.message.taxonConcept[i]));\n              \n              // UUID\n              var uuid = doc.message.taxonConcept[i].replace(/urn:lsid:biodiversity.org.au:afd.taxon:/, '');\n              triples.push(triple(subject_id,\n                'http://schema.org/identifier',\n                uuid));\n            }\n       \t   break;\n\n        case 'parentGuid':\n          if (doc.message.taxonConcept[i]) {\n          triples.push(triple(subject_id,\n            'http://www.w3.org/2000/01/rdf-schema#subClassOf',\n            'https://bie.ala.org.au/species/' + doc.message.taxonConcept[i]));\n          }\n\t\t\t/* dwc\n          triples.push(triple(subject_id,\n            'http://rs.tdwg.org/dwc/terms/parentNameUsageID',\n            'https://bie.ala.org.au/species/' + doc.message.taxonConcept[i]));\n           */\n           break;\n  \n        case 'nameString':\n           triples.push(triple(subject_id,\n            'http://rs.tdwg.org/ontology/voc/TaxonConcept#nameString',\n            doc.message.taxonConcept[i]));\n\n\t\t\t/* dwc\n          triples.push(triple(subject_id,\n            'http://rs.tdwg.org/dwc/terms/scientificName',\n            doc.message.taxonConcept[i]));\n            */\n          break;\n          \n        case 'nameComplete':\n          triples.push(triple(subject_id,\n            'http://schema.org/name',\n            doc.message.taxonConcept[i]));\n         break;          \n          \n        case 'rankString':\n          triples.push(triple(subject_id,\n            'http://rs.tdwg.org/dwc/terms/taxonRank',\n            doc.message.taxonConcept[i]));\n          break;\n\n        default:\n          break;\n      }\n    }\n    \n    \n    // https://images.ala.org.au/store/7/7/d/f/48888f07-16a8-493e-8d4a-3cff1406fd77/original\n    // image URL is last four characters in UUID in reverse order, separated by /, then UUID, then /original (sigh)\n    \n    if (doc.message.imageIdentifier) {\n       var image_id = 'urn:uuid:' + doc.message.imageIdentifier;\n       \n          triples.push(triple(subject_id,\n            'http://schema.org/image',\n            image_id));\n            \n         // type\n\t\t triples.push(triple(\n\t\t\t\timage_id,\n\t\t\t\t'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',\n\t\t\t\t'http://schema.org/ImageObject'\n\t\t\t\t));         \n            \n          // uuid\n          triples.push(triple(image_id,\n            'http://schema.org/identifier',\n            doc.message.imageIdentifier));\n          \n          // thumbnail (bytes)\n          triples.push(triple(image_id,\n            'http://schema.org/thumbnailUrl',\n            'URILITERALhttps://images.ala.org.au/image/proxyImageThumbnail?imageId=' + doc.message.imageIdentifier));\n \n \t\t // image (bytes)\n          triples.push(triple(image_id,\n            'http://schema.org/contentUrl',\n            'URILITERALhttps://images.ala.org.au/image/proxyImage?imageId=' + doc.message.imageIdentifier));    \t\n\n\t\t\t// web page with image\n          triples.push(triple(image_id,\n            'http://schema.org/url',\n            'URILITERALhttps://images.ala.org.au/image/details?imageId=' + doc.message.imageIdentifier));    \t\n\n    }\n    \n    output(doc, triples);\n  }\n}\n\nfunction (doc) {\n  if (doc.message.taxonConcept) {\n    message(doc);\n  }\n}\n// END COUCHDB VIEW"
    }
  },
  "language": "javascript"
}